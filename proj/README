Xuedan Fillmore
CSCI 4229 Computer Graphics
26 June 2020

Project | Typewriter

ORIGINAL CONCEPT
  An interactive typewriter demonstrating the following:
    Application of textures in OpenGL
    OpenGL lighting
    First person perspective projection
    Selection in three dimensions
    Synchronization of visual behaviors

COMPILE
  $ make

RUN
  $ typewriter

LOCAL CONFIG
  Windows OS 10 with mounted Ubuntu terminal
  Start Xming
  $ export DISPLAY=:0.0
  $ ./typewriter

KEY BINDINGS
q, ESC   quit program
r        reset view to default
arrows   change angular view
w,a,s,d  change lateral position
         forward, left, backward, right
F/f      increase/decrease field of view (zoom)
z        increase elevation (eye height)
x        decrease elevation (eye height)
i,k      increase/decrease height of light source
j        decrease radius of light source movement
l        increase radius of light source movement
space    shift carriage position (left)
backspace shift carriage position (right)

Time Estimation
(total ~ 44 hours)
+ 2h -> initial setup
+ 8h -> setup and typewriter keys (construction and making textures)
+ 4h -> c to c++ debugging, typewriter body and key adjustments
+ 5h -> 3d selection research/setup
+ 4h -> 3d selection research/reversal
+ 1h -> color selection research
+ 2h -> color selection setup
+ 1h -> character conversion algoritm
+ 1h -> color selection research/more setup
+ 4h -> color selection work/typewriter body
+ 4h -> typewriter body
+ 1h -> typewriter body
+ 1h -> fixed key rods and added light controls
+ 3h -> carriage construction and interaction
+ 3h -> carriage detail construction

Wishful Thinking...
  Paper itself
  Carriage return handle
  Fix coloring and texture lines
  Interactivity - key pressing
  Interactivity - hammer motion
  Interactivity - paper update
  Interactivity - carriage return

The Selection Challenge
  I started with the intention of using OpenGL's built-in selection mode. I set up the name stack, pick matrix,
  and various other aspects that sites recommended. However, I ran into a display issue wherein my selection
  consumed the viewport. I could not find a resource that I understood and could use that explained how to
  avoid this predicament, so I decided to try a new method. From my initial searches for implementing
  3d selection, I had run into some ray casting, but my time limitation and knowledge limitation with OpenGL
  turned me instead toward color-based selection. The idea is that the pickable items are rendered in a 
  unique, solid color in the back frame buffer (using double buffer, not swapping). When the user clicks on
  a particular color, its color id is then matched with the item that is actually visible to the user and
  whatever action(s) is/are then performed. I failed to get this to work, though. When I checked the coloring
  of the back buffer, only a couple of colors rendered, the rest of the objects being black with the
  background. My inability to overcome this confusing outcome prevented me from implementing interactive selection.
  Despite this, I feel I learned a lot about selection in OpenGL and would not be afraid to try it again
  on a future project, if I were to do another.

The Texture Challenge
  All of the alphanumeric/symbolic keys sharing the same style were produced in Adobe PhotoShop. All other
  textures are just converted off of the internet, though the typewriter's body texture has much to be desired,
  especially considering the visible lines at the edges of the bitmap border.
  It was impossible to find a complete set of keyboard keys that met my aesthetic preferences, didn't have a
  watermark, and had a usable angle on the keys, so I took it upon myself to build a set with all of my own
  preferences, influenced by various vintage and modern typewriters in Google Images.

The Build Challenge
  This was the first time I implemented face culling. While not a difficult thing to do, it did require me to
  refactor the organization of many of my vertices that I had drawn initially. The most time-consuming challenge
  I dealt with in terms of building the typewriter body was the two faces that are sloped. Slapping down four
  vertices would have been no problem, and in fact I did do that as a temporary placeholder. But when it came to
  giving the surfaces enough vertices to look reasonable when lit, I had to recursively generate vertices on
  a slope and translating the simple math of the polygon into GL vertices was quite confusing, especially as
  I tried to work from foundational code that I didn't fully understand.

EXTERNAL RESOURCES/ACKNOWLEDGEMENTS
  Picking, Selection Mode (reverted)
    > https://www.glprogramming.com/red/chapter13.html
    > https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPickMatrix.xml
    > https://community.khronos.org/t/i-want-to-draw-two-objects-then-just-move-one-of-them/16733/3
    > http://unknownware.com/rtfm/graphics/glselection.html
    > http://web.cse.ohio-state.edu/~shen.94/581/Site/Slides_files/picking.pdf
    > http://newton.uam.mx/xgeorge/uea/graficacion/Archivos_relacionados_a_varias_temas_del_curso/Selection/OpenGl%20-%20Tutorial%2027%20%20Object%20Selection.htm
    > http://medialab.di.unipi.it/web/IUM/Waterloo/node87.html
    > https://people.clarkson.edu/class/ee465/lectures/lecture_27/lecture_27.html
  Bitmap Fonts
    > http://jerome.jouvie.free.fr/opengl-tutorials/Tutorial20.php
  Color Selection, Frame Buffer
    > http://www.opengl-tutorial.org/miscellaneous/clicking-on-objects/picking-with-an-opengl-hack/
    > https://www.opengl.org/resources/libraries/glut/spec3/node50.html
    > https://www.lighthouse3d.com/tutorials/opengl-selection-tutorial/
    > https://moddb.fandom.com/wiki/OpenGL_Selection_Using_Unique_Color_IDs
    > http://what-when-how.com/opengl-programming-guide/object-selection-using-the-back-buffer-opengl-programming/
  Projection and Movement (foundational past code)
    > https://thepentamollisproject.blogspot.com/2018/02/setting-up-first-person-camera-in.html
    > http://math.hws.edu/graphicsbook/c4/s2.html
    > https://www.tomdalling.com/blog/modern-opengl/04-cameras-vectors-and-input/
    > https://github.com/mattearly/TheOnlyEscapeIsESC/blob/master/code/camera.h
    > http://www.lighthouse3d.com/tutorials/glut-tutorial/keyboard-example-moving-around-the-world/
    > http://www.opengl-tutorial.org/beginners-tutorials/tutorial-6-keyboard-and-mouse/

Source Code Repository
  github.com/xfillmore/cucscg/